//동기화
//다음의 경우를 가정해보자
//어떤 자동차 회사에는 운정기사가 2명있고 각각 돈을법니다
//그래서 운전기사를 Driver라는 클래스로 만들고 두 개의 스레드를
//운영하는 프로그램을 설계한다
//이처럼 스레드와 스레드 사이의 처리 타이밍제어 메커니즘을 일컬어
//동기화(synchronization)라고 부른다.


//add 메소드에 synchronized가 없다면 스레스와 스레드사이에서 충돌이 일어나 오류발생


class Company{
	private int sum = 0;

	public synchronized void add(int a) { // 송금 하는 코드
		int tmp = sum;
		System.out.println("현재 금액의 합은 " + tmp + "원 입니다.");
		System.out.println(a + "원 벌었습니다.");
		tmp = tmp + a;
		System.out.println("금액의 합을 " + tmp + "원으로 만듭니다.");
		sum = tmp;
	}
}

class Driver extends Thread{
	private Company copm;

	public Driver(Company c) {
		copm = c;
	}
	public void run() {
		for (int i = 0; i < 3; i++) {
		try {
			sleep(2000);
			copm.add(50); // 송금합니다.
		} catch (Exception e) {
			// TODO: handle exception
		}

		
		}
	}
}

public class Test{
	public static void main(String[] args) {
		Company cmp = new Company(); // 회사 객체를 생성

		Driver drv1 = new Driver(cmp); // 운전기사 객체를 생성
		drv1.start();

		Driver drv2 = new Driver(cmp); //운전기사 객체를 생성
		drv2.start();

	}
}
//출력문
//현재 금액의 합은 0원 입니다.
//50원 벌었습니다.
//금액의 합을 50원으로 만듭니다.
//현재 금액의 합은 50원 입니다.
//50원 벌었습니다.
//금액의 합을 100원으로 만듭니다.
//현재 금액의 합은 100원 입니다.
//50원 벌었습니다.
//금액의 합을 150원으로 만듭니다.
//현재 금액의 합은 150원 입니다.
//50원 벌었습니다.
//금액의 합을 200원으로 만듭니다.
//현재 금액의 합은 200원 입니다.
//50원 벌었습니다.
//금액의 합을 250원으로 만듭니다.
//현재 금액의 합은 250원 입니다.
//50원 벌었습니다.
//금액의 합을 300원으로 만듭니다.
