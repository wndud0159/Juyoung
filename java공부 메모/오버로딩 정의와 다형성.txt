//메소드오버로딩
//클래스는 같은 이름의 메소드를 2개이상 정의할 수 있는 기능을 제공합니다.
//이러한 기능을 일컬어 메소드 오버로딩(overloading) 이라고 부릅니다.
//
//
//단, 메소드를 오버로딩 할 때에는 메소드의 인수의 형(type)과 개수를 다르게 만들어야 합니다.
//즉, 이름이 같은 메소드들은 아래와 같이 인수가 달라야 합니다.
//
//
//여러 개의 비슷한 메소드들을 같은 이름으로 중복 정의(오버로딩)해 두면
//그 이름과 일치 하느니 메소드들 중 인수의 형(type)과 개수가 일치하는 메소드가 자동적으로 호출된다
//는 것입니다. 이러한 클래스를 설계해 두면 매우 편리합니다. 유사한 처리에 동일한 메소드 이름을 사용할 수 있기 때문입니다.
//
//
//setCar 와 같은 하나의 이름이 상황에 맞추어 다른기능을 가지는 것을 일컬어
//다형성(polymorphism) 이라고 부른다.

class Car{
	private int num;
	private double gas;
	
	public Car() {}
	
	public void setCar(int num) {
		this.num =num;
	System.out.println("차량 번호만 변경 되었습니다.");	
	}
	public void setCar(double gas) {
		this.gas =gas;
	System.out.println("연료량만 변경 되었습니다.");	
	}
	public void setCar(int num, double gas) {
		this.num =num; this.gas = gas;
	System.out.println("차량번호와 연료량이 변경 되었습니다.");	
	}
	public void Show() {
		System.out.println("차량번호는 " + this.num + "\n" + "연료량은 " + this.gas);
		}
}

public class Sample12 {
	public static void main(String[] args) {
		Car car1 = new Car();
		car1.setCar(2345);
		car1.Show();
		car1.setCar(30.5);
		car1.Show();
		car1.setCar(1234, 20.5);
		car1.Show();
	}
}